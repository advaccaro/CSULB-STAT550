%STAT550_HW3_8_18.m
%Adam Vaccaro
%Purpose: Load the women's national record track and field data, then
%(a) Obtain sample correlation matrix, determine its eigenvalues and
%eigenvectors
%(b) Determine first two PCs.  Make table showing correlations of the
%standardized variables with the components, and the cumulative percentage
%of the total (standardized) sample variance explained by the two components
%(c) N/A
%(d) Rank nations based on their score of the first PC
clear all;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/ADV/Documents/MATLAB/T1-9.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/04/17 23:06:11

%% Initialize variables.
filename = '/Users/ADV/Documents/MATLAB/T1-9.dat';
delimiter = '\t';

%% Format for each line of text:
formatSpec = '%s%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Allocate imported array to column variable names
COUNTRY = dataArray{:, 1};
M100 = dataArray{:, 2};
M200 = dataArray{:, 3};
M400 = dataArray{:, 4};
M800 = dataArray{:, 5};
M1500 = dataArray{:, 6};
M3000 = dataArray{:, 7};
MARA = dataArray{:, 8};

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;


%% Combine data into single matrix
X = [M100 M200 M400 M800 M1500 M3000 MARA];

%% Obtain sample correlation matrix
R = corr(X);

%% Determine it's eigenvalues and eigenvectors
[V,D] = eig(R);
%V(:,1) = -V(:,1); %match SAS output
for i = 1:length(D)
    eigs(i) = D(i,i);
end
eigs_sort = fliplr(sort(eigs));
for i = 1:length(D)
    ind = find(eigs_sort(i) == eigs);
    V_sort(:,i) = V(:,ind);
end

lambda = eigs_sort;
ev = V_sort;
ev(:,3) = -ev(:,3);
ev(:,6) = -ev(:,6);

%% Correlations of SD variables with components
for j = 1:7
    for k = 1:7
        %corxy(j,k) = sqrt(lambda(j))*ev(j,k);
        corxy(j,k) = lambda(j)*ev(j,k);
    end
end

corxy_table = cell(8,8);
for j = 1:7
    for k = 1:7
        corxy_table{j+1,k+1} = corxy(j,k);
    end
end
corxy_table{1,2} = 'Y1'; 
corxy_table{1,3} = 'Y2';
corxy_table{1,4} = 'Y3';
corxy_table{1,5} = 'Y4';
corxy_table{1,6} = 'Y5';
corxy_table{1,7} = 'Y6';
corxy_table{1,8} = 'Y7';
corxy_table{2,1} = 'Z1';
corxy_table{3,1} = 'Z2';
corxy_table{4,1} = 'Z3';
corxy_table{5,1} = 'Z4';
corxy_table{6,1} = 'Z5';
corxy_table{7,1} = 'Z6';
corxy_table{8,1} = 'Z7';

%% Cumulative percentage of PCs
for i = 1:7
    cpct(i) = sum(lambda(1:i))/7;
end

%% Determine first two PCs
PC1 = V(:,1);
PC2 = V(:,2);

%% PC1 Scores
PC1_scores = X*PC1;
PC1_sort = flipud(sort(PC1_scores));


%% Sort countries by PC1 score
for i = 1:length(PC1_sort)
    ind = find(PC1_sort(i) == PC1_scores);
    COUNTRY_SORT{i} = COUNTRY{ind};
end

%% Standardize variables
X_st = zeros(size(X));
row_mean = mean(X);
row_std = std(X);
for i = 1:length(X)
    row = X(i,:);
    %row_mean = mean(X);
    %row_mean = mean(row);
    %col_mean = mean
    %row_std = std(row);
    %col_std = std(
    standardized = (row-row_mean)./row_std;
    X_st(i,:) = standardized;
end



%% Correlations of standardized variables with the components
vars = var(X_st);
vars2 = var(X);
for i = 1:length(PC1)
    PC1_corr(i) = V(i,1)*sqrt(eigs(1))./sqrt(vars(i));
    PC1_corr2(i) = V(i,1)*sqrt(eigs(1))./sqrt(vars2(i));
    PC2_corr(i) = V(i,2)*sqrt(eigs(2))./sqrt(vars(i));
    PC2_corr2(i) = V(i,2)*sqrt(eigs(2))./sqrt(vars2(i));
end
    
%% PCs of standardized variables
PC1_st = X_st*PC1;
sort_PC1_st = flipud(sort(PC1_st));
for i = 1:length(sort_PC1_st)
    ind = find(sort_PC1_st(i) == PC1_st);
    COUNTRY_SORT2{i} = COUNTRY{ind};
end

%% test
PC1scores_test = V_sort(:,1)'*X';
PC1scores_testsort = sort(PC1scores_test);
%for i =1:length(sort_PC1_st)
%   ind = find(PC1scores_test

