%STAT550_HW3_8_21.m
%Adam Vaccaro
%Purpose: 
%% Import data from text file.
% Auto-generated by MATLAB on 2017/04/18 13:04:43

%% Initialize variables.
filename = '/Users/ADV/Documents/MATLAB/T8-6-proc.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9]);
rawCellColumns = raw(:, 1);


%% Allocate imported array to column variable names
VarName1 = rawCellColumns(:, 1);
mms = cell2mat(rawNumericColumns(:, 1));
mms1 = cell2mat(rawNumericColumns(:, 2));
mms2 = cell2mat(rawNumericColumns(:, 3));
mms3 = cell2mat(rawNumericColumns(:, 4));
mms4 = cell2mat(rawNumericColumns(:, 5));
mms5 = cell2mat(rawNumericColumns(:, 6));
mms6 = cell2mat(rawNumericColumns(:, 7));
marathonms = cell2mat(rawNumericColumns(:, 8));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;
%% Rename
COUNTRY = VarName1;
M100 = mms;
M200 = mms1;
M400 = mms2;
M800 = mms2;
M1500 = mms3;
M5000 = mms5;
M10000 = mms6;
MARA = marathonms;

%% Combine into single Matrix
X = [M100 M200 M400 M800 M1500 M5000 M10000 MARA];

%% Obtain covariancem matrix
S = cov(X);

%% Determine its eigenvalues and eigenvectors
[V,D] = eig(S);
for i = 1:length(D)
    eigs(i) = D(i,i);
end
eigs_sort = fliplr(sort(eigs));
for i = 1:length(D)
    ind = find(eigs_sort(i) == eigs);
    V_sort(:,i) = V(:,ind);
end

lambda = eigs_sort;
ev = V_sort;
%ev(:,3) = -ev(:,3);
%ev(:,6) = -ev(:,6);

%% Correlations of variables with components
for j = 1:8
    for k = 1:8
        corxy(j,k) = sqrt(lambda(j))*ev(j,k)/S(k,k);
    end
end

corxy_table=cell(9,9);
for j = 1:8
    for k = 1:8
        corxy_table{j+1,k+1} = corxy(j,k);
    end
end
corxy_table{1,2} = 'Y1'; 
corxy_table{1,3} = 'Y2';
corxy_table{1,4} = 'Y3';
corxy_table{1,5} = 'Y4';
corxy_table{1,6} = 'Y5';
corxy_table{1,7} = 'Y6';
corxy_table{1,8} = 'Y7';
corxy_table{1,9} = 'Y8';
corxy_table{2,1} = 'X1';
corxy_table{3,1} = 'X2';
corxy_table{4,1} = 'X3';
corxy_table{5,1} = 'X4';
corxy_table{6,1} = 'X5';
corxy_table{7,1} = 'X6';
corxy_table{8,1} = 'X7';
corxy_table{9,1} = 'X8';
%% Cumulative percentage of PCs
lam_sum = sum(lambda);
for i = 1:8
    cpct(i) = sum(lambda(1:i))/lam_sum;
end

%% First two PCs
PC1 = ev(:,1);
PC2 = ev(:,2);

%% PC1 Scores
PC1_scores = X*PC1;
PC1_sort = flipud(sort(PC1_scores));

for i = 1:length(PC1_sort)
    ind = find(PC1_sort(i) == PC1_scores);
    COUNTRY_SORT{i} = COUNTRY{ind};
end